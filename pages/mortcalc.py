from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
import logging

mort_calc_page_logger = logging.getLogger(__name__)


class ZillowMortgageCalculatorPage:
    '''
    TODO: need a JIRA Story to set up a proxy
          and change from verifying monthly P&I to full monthly value
          l_text_monthlypayment_id
          see also calling test for changes
          or wait for new advanced featues that can turn it off
    '''
    URL = "https://www.zillow.com/mortgage-calculator/"

    l_button_interestratehelp_class = (
        By.CLASS_NAME, "TriggerButton-c11n-8-64-1__sc-19o64qd-0 drLVVu")
    l_button_interestratehelp_xpath = (
        By.XPATH, "(//button[@type='button'])[8]")
    l_dropdown_loanprogram_id = (By.ID, "form-1_term")
    # note id's are autogenerated each time so unreliable
    l_errormsg_interestrate_classname = (
        By.CLASS_NAME, "StyledFormHelp-c11n-8-64-1__sc-h3s6hy-0 lfSzwh")
    l_label_interestrate_id = (By.ID, 'label_4')
    l_link_currentrates_xpath = (
        By.XPATH, "(// a[normalize-space() = 'See current rates'])[1]")
    l_text_monthlypayment_id = (
        By.CLASS_NAME, "arc-label-value")  # montly P&I outer arc value
    l_textbox_downpayment_id = (By.ID, "form-3_downPayment")
    l_textbox_downpaymentpercent_id = (
        By.ID, "form-3_downPaymentPercent")
    l_textbox_homeprice_id = (By.ID, "homePrice")
    l_textbox_interestrate_id = (By.ID, "rate")
    l_title_interestratehelptooltip_xpath = (
        By.XPATH, "(//h4[normalize-space()='Interest rate'])[1]")
    l_tooltip_x_interestratehelp_xpath = (
        By.XPATH, "(//*[name()='svg'][@role='img'])[32]")

    def __init__(self, browser):
        self.browser = browser

    def load(self):
        self.browser.get(self.URL)

    def _type_entry(self, value, element):
        # why why why !?!
        element.clear()
        element.clear()
        element.click()
        element.send_keys(value + Keys.TAB)

        # debug to show changes to end value as we go
        theResultingMonthly = self.browser.find_element(
            *self.l_text_monthlypayment_id)
        mort_calc_page_logger.info(f"the entered value: {value} "
                    f"resulting MonthlyP&I: {theResultingMonthly.text}")

    def enter_homevalue(self, value):
        theElement = self.browser.find_element(*self.l_textbox_homeprice_id)
        self._type_entry(value, theElement)

    def enter_downpayment(self, value):
        theElement = self.browser.find_element(*self.l_textbox_downpayment_id)
        self._type_entry(value, theElement)

    def enter_downpaymentpercent(self, value):
        theElement = self.browser.find_element(
            *self.l_textbox_downpaymentpercent_id)
        self._type_entry(value, theElement)

    def enter_interestrate(self, value):
        theElement = self.browser.find_element(
            *self.l_textbox_interestrate_id)
        self._type_entry(value, theElement)

    def get_monthlypayment(self):
        monthlypayment_pi = self.browser.find_element(
            *self.l_text_monthlypayment_id)
        mort_calc_page_logger.info(f"Return monthly payment : {monthlypayment_pi.text}")
        return monthlypayment_pi.text

    def click_test_help_button(self):
        # Click the Help button

        irate_help_button = self.browser.find_element(
            *self.l_button_interestratehelp_xpath)
        irate_help_button.click()
        # time.sleep(2)

    def get_test_help_button_title(self):
        # return tooltip title text
        irate_help_tooltip_title = self.browser.find_element(
            *self.l_title_interestratehelptooltip_xpath)
        mort_calc_page_logger.info(f"Return test help button title : "
                    f"{irate_help_tooltip_title.text}")
        return irate_help_tooltip_title.text

    def click_test_help_button_tooltip_x(self):
        # close tooltip
        irate_help_tooltip = self.browser.find_element(
            *self.l_tooltip_x_interestratehelp_xpath)
        irate_help_tooltip.click()

    def click_test_current_rates_link(self):
        # Click the Current Rate Link
        currentrates_link = self.browser.find_element(
            *self.l_link_currentrates_xpath)
        currentrates_link.click()

    def switch_to_current_tab(self):
        # Switch to tab just opened
        window_name = self.browser.window_handles[1]
        self.browser.switch_to.window(window_name=window_name)

    def close_current_tab(self):
        # Close the tab opened
        self.browser.close()
